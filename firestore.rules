rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    function isSignedIn() { return request.auth != null; }
    function isSelf(uid) { return isSignedIn() && request.auth.uid == uid; }
    function isAdmin() {
      return isSignedIn() &&
        get(/databases/$(db)/documents/users/$(request.auth.uid)).data.userType == "admin";
    }

    // USERS
    match /users/{uid} {
      allow read: if isSelf(uid) || isAdmin();
      allow create: if isSelf(uid);
      allow update: if isSelf(uid) || isAdmin();
    }

    // LISTS
    match /lists/{id} {
      allow read: if resource.data.isPublic == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // FORMS
    match /forms/{id} {
      allow read: if resource.data.isPublic == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // SUBSCRIBERS (doc id == auth.uid)
    match /subscribers/{uid} {
      allow read: if isSelf(uid) || isAdmin();
      allow create: if isSelf(uid);
      // Allow the user to update only allowed fields
      allow update: if isSelf(uid)
        && request.resource.data.keys().hasOnly([
            'email','displayName','listIds','createdAt','updatedAt','firstSubscribedAt','sources'
           ])
        && request.resource.data.listIds is list
        // (optional) only set firstSubscribedAt once
        && (
          (resource.data.firstSubscribedAt == null && request.resource.data.firstSubscribedAt is timestamp)
          || (request.resource.data.firstSubscribedAt == resource.data.firstSubscribedAt)
        )
        // Ensure all listIds reference existing public lists
        && request.resource.data.listIds.all(id =>
             exists(/databases/$(db)/documents/lists/$(id)) &&
             get(/databases/$(db)/documents/lists/$(id)).data.isPublic == true
           );
      allow delete: if isAdmin();
    }

    // POSTS
    match /posts/{id} {
      allow read: if resource.data.status == "published" || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // COURSES
    match /courses/{id} {
      allow read: if resource.data.isPublic == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // FORM SUBMISSIONS (Optional logging)
    match /formSubmissions/{sid} {
      allow create: if isSignedIn();
      allow read: if isAdmin();
      allow update, delete: if false;
    }
  }
}
